apply plugin: 'com.android.library'

apply plugin: 'maven'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_FAULT_ID
                pom.version = VERSION_NAME
                repository(url: RELEASE_REPOSITORY_URL) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: SNAPSHOT_REPOSITORY_URL) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
            }
        }
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
    }
}

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
                arguments = [moduleName: project.getName()]
            }
        }
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    configurations {
        all*.exclude group: 'com.android.support', module: 'support-v13'
    }
    api fileTree(include: ['*.jar'], dir: 'libs')
    api project(':mango-lib')
    api 'androidx.constraintlayout:constraintlayout:1.1.3'
    api('com.alibaba:arouter-api:1.3.1') {
        exclude group: 'com.android.support', module: 'support-v4'
    }
    annotationProcessor 'com.alibaba:arouter-compiler:1.1.4'
    api 'com.haocang:app-mango-offline:0.0.0012-SNAPSHOT@aar'
    api 'com.haocang:app-mango-equipment-androidx:0.0.0002-SNAPSHOT@aar'
//    api 'com.haocang:app-mango-equipment:0.0.0020-01-SNAPSHOT@aar'
//    api 'com.haocang:app-mango-curve:0.0.0033-SNAPSHOT@aar'
    api project(path: ':curve-link')
//    api 'com.haocang:app-mango-repair:0.0.0014-SNAPSHOT@aar'
    api project(path: ':repair-link')
    api 'com.haocang:app-mango-maintain:0.0.0012-SNAPSHOT@aar'
//    api 'com.haocang:app-mango-monitor:0.0.0056-01-SNAPSHOT@aar'
    implementation 'com.github.pinguo-zhouwei:MZBannerView:v2.0.2'
    api 'com.haocang:app-mango-inventory:0.0.0004-SNAPSHOT@aar'
    api 'com.hyman:flowlayout-lib:1.1.2'
//    api 'com.haocang:app-haocang-ar:0.0.0006-fs-SNAPSHOT@aar'
    api 'com.haocang:app-haocang-ar:0.0.0027-SNAPSHOT@aar'
//    api 'com.haocang:app-haocang-WATER:0.0.0007-SNAPSHOT@aar'
    api project(path: ':watermark-link')
    //    api 'com.haocang:app-hc-lib:0.0.1-SNAPSHOT@aar'
//    implementation project(':off-line')

    //新版
    api 'com.haocang:app-mango-monitor-androidx:0.0.0019-SNAPSHOT@aar'
}
